import React, { useState, useEffect, useCallback, useRef } from 'react';
import { View, ActivityIndicator, TextInput, Alert, KeyboardAvoidingView, Platform } from 'react-native';
import { Stack, useLocalSearchParams, router } from 'expo-router';
import { Text } from '~/components/ui/text';
import { Button } from '~/components/ui/button';
import { useWebSocketGame, GameStatus } from '~/hooks/useWebSocketGame';
import { closeGame } from '~/lib/api/client'; // Import closeGame API

const THEME_INPUT_DURATION_S = 60; // 60 seconds for admin to input theme

export default function ThinkingScreen() {
  // --- Hooks and State ---
  const params = useLocalSearchParams<{ gameId: string; userId?: string; isAdmin?: string }>();
  const gameId = params.gameId;
  const userId = params.userId ?? null;
  // Initialize isAdmin from URL params as a fallback, but will update from WebSocket messages
  // This ensures we have a reasonable default until WebSocket determines the true role
  const [isAdmin, setIsAdmin] = useState(params.isAdmin === 'true'); // Initialize from URL param first
  console.log(`[ThinkingScreen] üîë Initial isAdmin from URL: ${params.isAdmin}, set to: ${isAdmin}`);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const [systemInputPrompt, setSystemInputPrompt] = useState('');

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    console.log('[ThinkingScreen] –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      gameId,
      userId,
      isAdmin,
      note: 'isAdmin –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–µ—Ä–µ–∑ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —á–µ—Ä–µ–∑ URL'
    });
  }, []); // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  const [themeText, setThemeText] = useState('');
  const [timeLeft, setTimeLeft] = useState(THEME_INPUT_DURATION_S);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å React Native
  const timerRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  // WebSocket connection
  const {
    isConnected: isWsConnected,
    error: wsError,
    readyState: wsReadyState,
    gameStatus,
    currentTheme, // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É –∏–∑ WebSocket
    sendMessage,
    handleApiError, // Import the handleApiError function
    lastSystemMessage, // Get system messages for role determination
    hasAdminMessage, // Get admin message flag
  } = useWebSocketGame(gameId, userId);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
  // –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ, —á–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–µ–π –ø–æ—Å–ª–µ replayability
  const determineRoleFromMessage = React.useCallback((message: string | null) => {
    console.log('[ThinkingScreen] determineRoleFromMessage –≤—ã–∑–≤–∞–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', message);
    
    if (!message) {
      console.log('[ThinkingScreen] determineRoleFromMessage: –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
      return null;
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (message.includes('–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é')) {
      console.log('[ThinkingScreen] determineRoleFromMessage: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ê–î–ú–ò–ù–ê');
      return { isAdmin: true, prompt: '–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é' };
    }
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    if (message.includes('–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤–≤–æ–¥–∏—Ç —Ç–µ–º—É')) {
      console.log('[ThinkingScreen] determineRoleFromMessage: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï-–ê–î–ú–ò–ù–ê');
      return { isAdmin: false, prompt: '–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤–≤–æ–¥–∏—Ç —Ç–µ–º—É' };
    }
    
    console.log('[ThinkingScreen] determineRoleFromMessage: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤');
    return null;
  }, []);

  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ lastSystemMessage –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏
  useEffect(() => {
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('[ThinkingScreen] DEBUG - –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:', gameStatus);
    console.log('[ThinkingScreen] DEBUG - –¢–µ–º–∞:', currentTheme); 
    console.log('[ThinkingScreen] DEBUG - –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', lastSystemMessage);
    console.log('[ThinkingScreen] DEBUG - –§–ª–∞–≥ –∞–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏—è:', hasAdminMessage);
    console.log('[ThinkingScreen] DEBUG - –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å isAdmin:', isAdmin);
    console.log('[ThinkingScreen] DEBUG - isAdmin –∏–∑ URL:', params.isAdmin);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–∞ hasAdminMessage –∏ lastSystemMessage
    let roleInfo = null;
    
    // Check for exact admin message first
    if (lastSystemMessage && lastSystemMessage.includes('–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é')) {
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, —ç—Ç–æ –∞–¥–º–∏–Ω
      roleInfo = { isAdmin: true, prompt: '–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é' };
      console.log('[ThinkingScreen] üîë –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –ê–î–ú–ò–ù–ê –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é"');
    } 
    // Use hasAdminMessage flag as backup admin detection
    else if (hasAdminMessage) {
      roleInfo = { isAdmin: true, prompt: '–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é' };
      console.log('[ThinkingScreen] üîë –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –ê–î–ú–ò–ù–ê –∏–∑ —Ñ–ª–∞–≥–∞ hasAdminMessage=true');
    } 
    // Message for regular player
    else if (lastSystemMessage && lastSystemMessage.includes('–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤–≤–æ–¥–∏—Ç —Ç–µ–º—É')) {
      roleInfo = { isAdmin: false, prompt: '–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤–≤–æ–¥–∏—Ç —Ç–µ–º—É' };
      console.log('[ThinkingScreen] üîë –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –ù–ï-–ê–î–ú–ò–ù–ê –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–∫ –≤–≤–æ–¥–∏—Ç —Ç–µ–º—É"');
    }
    // Use URL param as a backup if no messages yet and status is MAIN_PLAYER_THINKING or THEME_INPUT
    else if ((gameStatus === 'MAIN_PLAYER_THINKING' || gameStatus === 'THEME_INPUT') && params.isAdmin === 'true' && !roleInfo) {
      roleInfo = { isAdmin: true, prompt: '–í–≤–µ–¥–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é' };
      console.log('[ThinkingScreen] üîë –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –ê–î–ú–ò–ù–ê –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)');
    }
    
    if (roleInfo) {
      console.log('[ThinkingScreen] DEBUG - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ä–æ–ª—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', roleInfo);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
      if (roleInfo.isAdmin !== isAdmin) {
        console.log('[ThinkingScreen] DEBUG - –ò–ó–ú–ï–ù–ï–ù–ò–ï –†–û–õ–ò —Å', isAdmin, '–Ω–∞', roleInfo.isAdmin);
        setIsAdmin(roleInfo.isAdmin);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      console.log('[ThinkingScreen] DEBUG - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞:', roleInfo.prompt);
      setSystemInputPrompt(roleInfo.prompt);
    } else {
      console.log('[ThinkingScreen] DEBUG - –ù–ï–¢ –†–û–õ–ò –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è. hasAdminMessage:', hasAdminMessage, 'lastSystemMessage:', lastSystemMessage);
      // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
      console.log('[ThinkingScreen] DEBUG - –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:', systemInputPrompt);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞ - –∑–∞–ø–æ–º–Ω–∏–º –µ—ë –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    if (currentTheme && currentTheme.trim() !== '') {
      console.log('[ThinkingScreen] DEBUG - –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞:', currentTheme);
      setThemeText(currentTheme);
    }
  }, [gameStatus, currentTheme, lastSystemMessage, hasAdminMessage, isAdmin, systemInputPrompt]);

  // --- Timer Logic ---
  useEffect(() => {
    const duration = isAdmin ? THEME_INPUT_DURATION_S : THEME_INPUT_DURATION_S + 5;
    setTimeLeft(duration);
    timerRef.current = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime <= 1) {
          clearInterval(timerRef.current!);
          timerRef.current = null;
          // Handle timer expiration inline
          if (isAdmin) {
            closeGame(gameId!).catch(err => {
              setError("Failed to automatically close the game. Please go back.");
              handleApiError(err, gameId!, userId, isAdmin);
            });
            Alert.alert("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!", "–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É. –ò–≥—Ä–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞.", [{ text: "OK" }]);
          } else {
            Alert.alert("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ!", "–û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞...", [{ text: "OK" }]);
          }
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    };
  }, [isAdmin, gameId, userId, handleApiError]);

  // --- Game Status Polling for non-admin (handle 500 error) ---
  useEffect(() => {
    if (!isAdmin && gameStatus === 'THEME_INPUT' && gameId) {
      const interval = setInterval(async () => {
        try {
          // Use direct API to check status
          const res = await fetch(`http://localhost:8080/room/${gameId}/status`);
          if (!res.ok) {
            if (res.status === 500) {
              router.replace('/'); // Go to main menu
            }
          }
        } catch (e) {
          // Network error, treat as 500
          router.replace('/');
        }
      }, 3000); // Poll every 3s
      return () => clearInterval(interval);
    }
  }, [isAdmin, gameStatus, gameId]);

  // --- Actions ---
  const handleSubmitTheme = useCallback(() => {
    if (!isAdmin || !themeText.trim() || isSubmitting || !isWsConnected) return;

    setIsSubmitting(true);
    setError(null);
    console.log(`Admin submitting theme: ${themeText}`);

    try {
        // Send the theme text directly as a string message
        sendMessage(themeText.trim());

        // Stop the timer
        if (timerRef.current) {
            clearInterval(timerRef.current);
            timerRef.current = null;
        }

        // Optional: Show feedback like "Theme submitted, waiting..."
        // Navigation will be handled by the status change effect
    } catch (err) {
        console.error("Failed to send theme message:", err);
        setError(err instanceof Error ? err.message : "Failed to submit theme via WebSocket.");
        setIsSubmitting(false); // Allow retry
    } finally {
        // Don't set isSubmitting false here if we expect navigation
        // setIsSubmitting(false);
    }
  }, [isAdmin, themeText, isSubmitting, isWsConnected, sendMessage]);

  // --- Game Status Change Handling (Navigation) ---
  useEffect(() => {
    // Log the current state for debugging
    console.log(`[ThinkingScreen] üìä Navigation check - gameStatus: ${gameStatus}, isAdmin: ${isAdmin}, hasAdminMessage: ${hasAdminMessage}`);
    
    // Special handling for MAIN_PLAYER_THINKING when we're the admin
    if (gameStatus === 'MAIN_PLAYER_THINKING' && isAdmin) {
        console.log(`[ThinkingScreen] ‚úÖ Admin user in MAIN_PLAYER_THINKING state - staying on this screen to input theme`);
        return; // Stay on this screen if admin during MAIN_PLAYER_THINKING
    }
    
    // Navigate away if status is no longer THEME_INPUT or if disconnected
    if (gameStatus !== 'THEME_INPUT' && gameStatus !== 'UNKNOWN') { // Allow UNKNOWN during initial load
        console.log(`ThinkingScreen: Navigating away due to status change: ${gameStatus}`);
        
        // Go back to lobby or appropriate screen if status regresses or advances unexpectedly
        if (gameStatus === 'WAITING_FOR_PLAYERS' || gameStatus === 'CLOSED') {
             router.replace({ pathname: '/lobby/[gameId]', params: { gameId, userId, isAdmin: isAdmin.toString() } });
        } else if (gameStatus === 'WAITING_FOR_PLAYER_MESSAGE_AFTER_PROMPT') {
             // Navigate all users directly to answer screen when admin has selected a theme
             console.log(`[ThinkingScreen] üö® Status changed to WAITING_FOR_PLAYER_MESSAGE_AFTER_PROMPT - navigating DIRECTLY to answer.tsx`);
             console.log(`[ThinkingScreen] üìù Theme text: "${themeText || currentTheme || 'undefined'}", isAdmin: ${isAdmin}`);
             
             // Use either local themeText (for admin) or currentTheme from WebSocket (for non-admin)
             const scenarioToPass = isAdmin ? themeText : currentTheme;
             
             // Add random query param to prevent stale navigation cache issues
             const randomParam = Date.now().toString();
             
             router.replace({ 
                 pathname: '/game/answer', 
                 params: { 
                     gameId, 
                     userId, 
                     isAdmin: isAdmin.toString(), 
                     scenario: scenarioToPass || '',  // Ensure we pass empty string if undefined
                     _: randomParam // Cache-busting parameter
                 } 
             });
        } 
        // Add other navigation cases if needed
    }
  }, [gameStatus, gameId, userId, isAdmin, themeText, currentTheme, hasAdminMessage]);

  // --- UI Rendering ---
  // Additional debug log right before render to confirm state
  console.log(`[ThinkingScreen] üé® Rendering UI with isAdmin=${isAdmin}, gameStatus=${gameStatus}, hasAdminMessage=${hasAdminMessage}`);
  
  return (
    <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        className='flex-1'
    >
        <View className='flex-1 justify-center items-center p-4 bg-background'>
            <Stack.Screen options={{ title: isAdmin ? '–í–≤–æ–¥ —Ç–µ–º—ã' : '–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–º—ã' }} />

            {isAdmin ? (
                <>
                    <Text className='text-2xl font-bold mb-4 text-foreground'>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã</Text>
                    <Text className='text-lg mb-6 text-muted-foreground'>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {timeLeft}—Å</Text>
                    <TextInput
                        value={themeText}
                        onChangeText={setThemeText}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–æ–º–±–∏-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–µ"
                        className='w-full border border-border rounded-md p-3 mb-6 text-foreground bg-input'
                        placeholderTextColor={'hsl(var(--muted-foreground))'}
                        editable={!isSubmitting && timeLeft > 0} // Disable if submitting or time's up
                    />
                    <Button
                        onPress={handleSubmitTheme}
                        disabled={isSubmitting || !isWsConnected || !themeText.trim() || timeLeft <= 0}
                        className='w-full'
                    >
                        {isSubmitting ? (
                            <ActivityIndicator size="small" color="#ffffff" />
                        ) : (
                            <Text>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–º—É</Text>
                        )}
                    </Button>
                    {error && <Text className='text-destructive text-center mt-4'>{error}</Text>}
                    {wsError && <Text className='text-destructive text-center mt-2'>–û—à–∏–±–∫–∞ WS: {wsError instanceof Error ? wsError.message : '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º'}</Text>}
                </>
            ) : (
                // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞
                <>
                    <ActivityIndicator size='large' color={'hsl(var(--primary))'} />
                    <Text className='mt-4 text-lg text-foreground font-medium'>
                      {systemInputPrompt || '–û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤–µ–¥—É—â–∏–π –≤—ã–±–µ—Ä–µ—Ç —Ç–µ–º—É'}
                    </Text>
                    
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ */}
                    {currentTheme && currentTheme.trim() !== '' && (
                      <View className='mt-4 p-4 bg-muted/20 rounded-md'>
                        <Text className='text-center font-medium'>–¢–µ–º–∞:</Text>
                        <Text className='text-center mt-2'>{currentTheme}</Text>
                      </View>
                    )}
                    
                    {wsError && <Text className='text-destructive text-center mt-4'>–û—à–∏–±–∫–∞ WS: {wsError instanceof Error ? wsError.message : '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º'}</Text>}
                </>
            )}
        </View>
    </KeyboardAvoidingView>
  );
}